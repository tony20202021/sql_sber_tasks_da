# -*- coding: utf-8 -*-
"""lesson_5_homework

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AW7znT4UuZjQ3VQ1eJnbCTPxrdq2KiIN
"""

#установка библиотек
!pip install -U psycopg2
!pip install -U plotly

import psycopg2
psycopg2.__version__

"""# проверка подключения"""

# student11
# student11_password

#проверка подключения PostgreSQL 
import psycopg2
import pandas as pd
#Библиотека ждя визуализации
from IPython.display import HTML
import plotly.express as px


#!введите свои реквизиты!
DB_HOST = '52.157.159.24'
DB_USER = 'student11'
DB_USER_PASSWORD = 'student11_password'
DB_NAME = 'sql_ex_third_stream'

conn = psycopg2.connect(host=DB_HOST, user=DB_USER, password=DB_USER_PASSWORD, dbname=DB_NAME)

conn

conn.isexecuting()

"""# задания

# task1 (lesson5)
* Компьютерная фирма: Сделать view (pages_all_products), в которой будет постраничная разбивка всех продуктов (не более двух продуктов на одной странице)
* Вывод: все данные из laptop, номер страницы, список всех страниц

sample:
* 1 1
* 2 1
* 1 2
* 2 2
* 1 3
* 2 3
"""

SQL1 =  """
            DROP VIEW IF EXISTS pages_all_products
            ;

            CREATE VIEW pages_all_products AS
            (
                WITH row_number_subquery AS
                (
                    SELECT *, ROW_NUMBER() OVER (ORDER BY price) AS rn
                    FROM laptop
                ),
                page_number_subquery AS
                (
                    SELECT *, (rn+1) / 2 AS page_number
                    FROM row_number_subquery
                )
                SELECT *, ROW_NUMBER(*) OVER (PARTITION BY page_number) AS number_in_page
                FROM page_number_subquery
            )
            ;

            SELECT * 
            FROM pages_all_products
            ;
        """

df = pd.read_sql_query(SQL1, conn)
df

"""# task2 (lesson5)
* Компьютерная фирма: Сделать view (distribution_by_type), в рамках которого будет процентное соотношение всех товаров по типу устройства. Вывод: производитель, тип, процент (%)
"""

SQL1 =  """
            DROP VIEW IF EXISTS distribution_by_type
            ;

            CREATE VIEW distribution_by_type AS
            (
                SELECT DISTINCT maker, type, 
                    CAST (100 * COUNT(1) OVER (PARTITION BY type) / (SELECT COUNT(1) FROM product) AS FLOAT) AS percent
                FROM product
                ORDER BY type, maker
            )
            ;

            SELECT * 
            FROM distribution_by_type
            ;
        """

df = pd.read_sql_query(SQL1, conn)
df

"""# task3 (lesson5)
* Компьютерная фирма: Сделать на базе предыдущенр view график - круговую диаграмму. Пример https://plotly.com/python/histograms/
"""

# fig = px.pie(df, values='percent', names='type', title='distribution_by_type')
# fig.show()

"""# task4 (lesson5)
* Корабли: Сделать копию таблицы ships (ships_two_words), но название корабля должно состоять из двух слов
"""

SQL1 =  """
            DROP TABLE IF EXISTS ships_two_words_11;

            CREATE TABLE ships_two_words_11 AS
                SELECT * 
                FROM ships
                WHERE (name LIKE '% %')
            ;

            SELECT * FROM ships_two_words_11;
        """

df = pd.read_sql_query(SQL1, conn)
df

"""# task5 (lesson5)
* Корабли: Вывести список кораблей, у которых class отсутствует (IS NULL) и название начинается с буквы "S"
"""

SQL1 =  """
            SELECT * 
            FROM ships
            WHERE (name LIKE 'S%') AND class IS NULL
            ;
        """

df = pd.read_sql_query(SQL1, conn)
df

"""# task6 (lesson5)
* Компьютерная фирма: Вывести все принтеры производителя = 'A' со стоимостью выше средней по принтерам производителя = 'C' и три самых дорогих (через оконные функции). Вывести model
"""

SQL1 =  """
            WITH maker_price AS
            (
                SELECT product.maker, product.model, price
                FROM product
                INNER JOIN printer
                ON product.model = printer.model
            ),
            maker_C_avg_price AS
            (
                SELECT AVG(price) OVER (PARTITION BY maker) 
                AS avg_price
                FROM maker_price 
                WHERE maker = 'C'
            ),
            -- у производителя C отсутствуют принтеры
            maker_C_avg_price_single_value AS
            (
                SELECT (SELECT avg_price FROM maker_C_avg_price) AS avg_price_single_value
            ),
            maker_C_avg_price_corrected AS
            (
                SELECT CASE
                WHEN avg_price_single_value IS NULL
                    THEN 0
                    ELSE avg_price_single_value
                END avg_price_corrected
                FROM maker_C_avg_price_single_value 
            ),
            top_price AS
            (
                SELECT model, price, ROW_NUMBER() OVER (ORDER BY price DESC) AS rn
                FROM maker_price
            )

            SELECT model
            FROM maker_price
            WHERE maker = 'A' AND price > (SELECT avg_price_corrected FROM maker_C_avg_price_corrected)

            UNION 
            
            SELECT model
            FROM top_price
            WHERE rn <= 3
        """

df = pd.read_sql_query(SQL1, conn)
df









