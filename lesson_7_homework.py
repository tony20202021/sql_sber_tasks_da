# -*- coding: utf-8 -*-
"""lesson_7_homework

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BA2uUsMfjwsPCaneKUv-O2BSWikbLlAN

# task1  (lesson7)
* sqlite3: Сделать тестовый проект с БД (sqlite3, project name: task1_7). В таблицу table1 записать 1000 строк с случайными значениями (3 колонки, тип int) от 0 до 1000.
* Далее построить гистаграмму распределения этих трех колонко
"""

import pandas as pd

import sqlite3

print(sqlite3.version)
print(sqlite3.sqlite_version)

con = sqlite3.connect('task1_7')
con

cur = con.cursor()
cur

cur.execute("DROP TABLE IF EXISTS table1")

cur.execute("""
            CREATE TABLE table1
            (
                column_01 int,
                column_02 int,
                column_03 int
            )
""")

con.commit()

for row in cur.execute("SELECT * FROM table1"):
    print(row)

cur.execute("SELECT * FROM table1").fetchall()

import random

def func_generate_random(limit):
    return random.randrange(limit)
    
con.create_function("generate_random", 1, func_generate_random)

cur.execute("""
   WITH RECURSIVE generate_row(value) AS (
     VALUES(1)
     UNION ALL
     SELECT value + 1 FROM generate_row WHERE value < 1000
   )
   INSERT INTO table1(column_01, column_02, column_03)
   SELECT
        generate_random(1000), 
        generate_random(1000), 
        generate_random(1000)
    FROM generate_row
   ;
""")

cur.execute("SELECT * FROM table1").fetchall()

df = pd.DataFrame(cur.execute("SELECT * FROM table1").fetchall())
df

df.hist();



con.close()

"""# task2  (lesson7)
* oracle: https://leetcode.com/problems/duplicate-emails/






"""

select distinct email from person group by email having count(email) >= 2

"""# task3  (lesson7)
* oracle: https://leetcode.com/problems/employees-earning-more-than-their-managers/
"""

select Employee.name AS Employee 
from Employee 
left join Employee AS managers
on Employee.managerId = managers.id
where Employee.salary > managers.salary

"""# task4  (lesson7)
* oracle: https://leetcode.com/problems/rank-scores/
"""

WITH unique_scores AS
(
    select DISTINCT score FROM Scores
),
unique_ranks AS
(
    select score, RANK() OVER(ORDER BY score DESC) AS "rank"
    from unique_scores
    order by score DESC
)
select Scores.score, unique_ranks.rank from Scores
left join unique_ranks
on Scores.score = unique_ranks.score
order by Scores.score DESC

"""# task5  (lesson7)
* oracle: https://leetcode.com/problems/combine-two-tables/
"""

select firstName, lastName, city, state FROM Person
left join Address
on Person.personId = Address.personId

