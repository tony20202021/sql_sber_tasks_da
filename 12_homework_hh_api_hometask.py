# -*- coding: utf-8 -*-
"""12_homework_HH-api-hometask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/197Kdn08ksKudxaheHnUZRGF4isLTDvse

# REBOOT_DA
## 12_homework_HH-api-hometask.ipynb
### Михалев Антон
"""

# Задание вытащить все вакансии СБЕРа с ХХ (у апи есть ограничение в 2000, подумайте как его обойти)
# Вытащите все полные описания этих вакансий по запросу с https://api.hh.ru/vacancies/43326020 где 43326020 id вакансии
# Создайте аналогичный vacancy DataFrame только добавьте поле skills
# Переведите даты публикаций в datetime
# Постройте график опубликованных вакансий по датам
# Переведите даты в дни недели, и определите день недели, в который больше всего публикуют вакансий
# Найдите те вакансии с использованием python, которые вам интересны
# Определите по полю skills какие навыки больше всего востребованы для этих вакансий, и
# Постройте график наиболее востребованных вакансий

import requests
from tqdm.auto import tqdm

sber = '3529'
page = 1
num_per_page = 100
moscow = 1
url = f'https://api.hh.ru/vacancies?employer_id={sber}&per_page={num_per_page}'
url

res = requests.get(url)
vacancies = res.json()
num_pages = vacancies.get('pages')
num_pages

"""# Задание вытащить все вакансии СБЕРа с ХХ (у апи есть ограничение в 2000, подумайте как его обойти)
* по заданному запросу приходит 1008 вакансий, без ограничений
"""

count_try = 10

all_vacancy_ids= []

res = requests.get(url)
vacancies = res.json()
num_pages = vacancies.get('pages')
print(num_pages)
print("="*30)

# for i in tqdm(range(vacancies.get('pages'))):
for i in range(num_pages):
    print(f"[{i}/{num_pages}]")
    
    url = f'https://api.hh.ru/vacancies?employer_id={sber}&page={i}&per_page={num_per_page}&area={moscow}'
    print(url)

    for num_try in range(count_try):
        res = requests.get(url)
        print(res, res.ok, res.status_code, )
        if res.ok:
            break

    if not res.ok:
        print(i, url, res, res.ok, res.status_code, )
        continue

    vacancies = res.json()
    vacancy_ids = [el.get('id') for el in vacancies.get('items')]
    print("+", len(vacancy_ids))

    all_vacancy_ids.extend(vacancy_ids)
    print("=", len(all_vacancy_ids))

# проверим уникальные ИД
len(set(all_vacancy_ids))

"""# Вытащите все полные описания этих вакансий по запросу с https://api.hh.ru/vacancies/43326020 где 43326020 id вакансии"""

print_every_count = 100

all_vacancies = {}

for index, id in enumerate(all_vacancy_ids):
    if (index == 0) or (index == len(all_vacancy_ids)) or ((index % print_every_count) == 0):
        print(f"[{index}/{len(all_vacancy_ids)}]")

    url = f'https://api.hh.ru/vacancies/{id}'
    # print(url)

    for num_try in range(count_try):
        res = requests.get(url)
        # print(res, res.ok, res.status_code, )
        if res.ok:
            break

    if not res.ok:
        print(index, id, url, res, res.ok, res.status_code, )
        continue

    vacancy = res.json()

    all_vacancies[id] = vacancy

len(all_vacancies)

all_vacancies[list(all_vacancies.keys())[0]]

"""# Создайте аналогичный vacancy DataFrame только добавьте поле skills"""

import pandas as pd

df_all = pd.DataFrame.from_dict(all_vacancies, orient='index')
df_all

df_all.columns

df_all['updated_at'] = None
df_all['vacid'] = None
df_all['vactitle'] = df_all['name']
df_all['vacdescription'] = df_all['description']
df_all['vacdate'] = df_all['published_at']
df_all['vacstatus'] = (~df_all['archived'] & ~df_all['archived'])
df_all['vactitle'] = df_all['name']
df_all['vaclink'] = df_all['alternate_url']
df_all['vachtml'] = None
df_all['skills'] = df_all['key_skills']

df_vacancy = df_all[['id', 'created_at', 'updated_at', 'vacid', 'vactitle', 'vacdescription', 'vacdate', 'vacstatus', 'vaclink', 'vachtml', 'skills']]
df_vacancy

"""# Переведите даты публикаций в datetime

"""

df_vacancy['vacdate'].dtype

df_vacancy['vacdate'] = pd.to_datetime(df_vacancy['vacdate'])
df_vacancy

df_vacancy['vacdate'].dtype

df_vacancy.info()

"""# Постройте график опубликованных вакансий по датам




"""

df_vacancy['vacdate'] = pd.to_datetime(df_vacancy['vacdate'].dt.date)
df_vacancy

df_vacancy['vacdate'].plot(figsize=(25, 5))

df_vacancy['vacdate'].sort_values().plot(figsize=(25, 5))

df_vacancy[['vacdate', 'id']].groupby(by=['vacdate']).count().plot(figsize=(25, 5))



"""# Переведите даты в дни недели, и определите день недели, в который больше всего публикуют вакансий"""

df_vacancy['vacdate_dayofweek'] = df_vacancy['vacdate'].dt.dayofweek
df_vacancy

df_vacancy['vacdate_dayofweek'].plot(figsize=(25, 5))

vacdate_dayofweek_count =  df_vacancy[['vacdate_dayofweek', 'id']].groupby(by=['vacdate_dayofweek']).count()
vacdate_dayofweek_count

vacdate_dayofweek_count.plot(figsize=(25, 5))

vacdate_dayofweek_count[vacdate_dayofweek_count['id'] == vacdate_dayofweek_count['id'].max()]

"""# Найдите те вакансии с использованием python, которые вам интересны"""

df_vacancy_favourites = df_vacancy[
    (
        (df_vacancy['vactitle'].str.upper().str.contains('python'.upper())) |
        (df_vacancy['vacdescription'].str.upper().str.contains('python'.upper()))
    )
    &
    (
        (df_vacancy['vactitle'].str.upper().str.contains('Data Scientist'.upper())) |
        (df_vacancy['vacdescription'].str.upper().str.contains('Data Scientist'.upper()))
    )
    ]

df_vacancy_favourites

"""# Определите по полю skills какие навыки больше всего востребованы для этих вакансий, и"""

df_vacancy_favourites['skills'].dtype

df_vacancy_favourites[['skills']]

df_vacancy_favourites['skills'].apply(lambda x: (type(x), len(x)))

df_vacancy_favourites['skills_raw'] = df_vacancy_favourites['skills']

df_vacancy_favourites_skills = df_vacancy_favourites.explode('skills')
df_vacancy_favourites_skills

df_vacancy_favourites_skills['skills'].dtype

df_vacancy_favourites_skills[df_vacancy_favourites_skills['skills'].isna()]['skills'] = None
df_vacancy_favourites_skills['skills'].fillna({})

df_vacancy_favourites_skills

df_vacancy_favourites_skills['skills_name'] = df_vacancy_favourites_skills['skills'].apply(lambda x: x['name'] if isinstance(x, dict) else None)
df_vacancy_favourites_skills

df_vacancy_favourites_skills_value_counts = df_vacancy_favourites_skills['skills_name'].value_counts()
df_vacancy_favourites_skills_value_counts

"""# Постройте график наиболее востребованных вакансий"""

df_vacancy_favourites_skills_value_counts[df_vacancy_favourites_skills_value_counts > 1].plot(figsize=(25, 5))

